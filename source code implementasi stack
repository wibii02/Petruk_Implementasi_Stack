#include <iostream>
#include <vector>
#include <stack>
#include <string>
#include <unordered_map>

using namesoace std;

vector<string> strToInfix(const string& inputString) {
    vector<string> infix;
    string token;
    for (char ch : inputString) {  
        if (isdigit (ch) || ch == '.') {
            token += ch;
        }else{
          if (!token.empty()) {
            infix.push_back(token);
            token.clear();
          }
          if (ch != '') {
            infix.push_back(string(1,ch));
          }
        }
      }
      if (!token.empty()) infix.push_back(token);
      return infix;
}

vector<string> infixToPostfix(const vector<string>& infix) {
    vector<string> postfix;
    stack<string> stack;
    unordered_map<string, int> precedence = {{"+", 1}, {"-", 1}, {"*", 2}, {"/",2}};

    for (const string& token : infix ) {
        if (isdigit(token[0]) || token[0] == '.') {
            postfix.push_back(token);
        } else if (token == "(" ) {
            stack.push(token);
        } else if (token == ")" ) {
            while (!stack.empty() && stack.top() != "(" ) {
                postfix.push_back(stack.top());
                stack.pop();
            }
            stack.pop();
        } else {
            while (!stack.empty() && stack.top() != "(" && presedence [stack.top()] >= precedence[token]) {
                postfix.push_back(stack.top());
                stack.pop();
            }
            stack.push(token);
        }
    }

    while (!stack.empty()) {
        postfix.push_back(stack.top());
        stack.pop();
    }

    return postfix;
}
double evaluatePostfix(const vector<string>&pstfix){
    stack<double> stack;

for (const string& token : pestfix){
    if (isdigit(token[0])|| token[0]=='.'){
    stack.push(stod(token));
    }else {
        double right = stack.top(); stack.pop();
        double left = stack.top(); stack.pop();
        if (token == "+") stack.push(left + right);
            else if (token == "-") stack.push(left - right);
            else if (token == "*") stack.push(left * right);
            else if (token == "/") stack.push(left / right);
        }
    }
    return stack.pop();
}
int main (){
    string inputString = "12 * 5 + 7 - (23 + 2) / 5 -4";
    vector<srting> infix = strToifix(inputString);
    vektor<string> postfix = infixTopostfix(infix);
    double result = evaluatePostfix(postfix);

    cout<< "Infix :";
    for (const string& token : infix) cout<< token << " ";
    cout<< endl;

    cout<< "Postfix :";
    for (const string& token : postfix) cout<< token << " ";
    cout<< endl;

    cout<< "Result :";
    cout<< result;
    cout<< endl;
return 0;
}
